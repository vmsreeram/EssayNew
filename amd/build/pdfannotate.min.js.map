{"version":3,"file":"pdfannotate.min.js","sources":["../src/pdfannotate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * OnClick handlers are defined here\n * These functions will call functions in pdfannotate.js.\n *\n * @subpackage essayannotate\n * @copyright  2024 IIT Palakkad\n * @copyright  based on work done by Ravisha Hesh {@link https://github.com/RavishaHesh/PDFJsAnnotations/tree/master}\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * PDFAnnotate v1.0.1\n * Author: Ravisha Heshan\n */\n\n /**\n * @updatedby Asha Jose and Parvathy S Kumar\n * SerializePDF and SavePDF functions are modified.\n */\n\n// import fabric from 'qtype_essayannotate/fabric';\n// import pdfjsLib from 'qtype_essayannotate/pdf';\n// import $ from 'jquery';\n\nvar contextid,attemptid,filename,usageid,slot;\n// export var PDFAnnotate = function(container_id, url, options = {}) {\n//     this.number_of_pages = 0;\n//     this.pages_rendered = 0;\n//     this.active_tool = 1; // 1 - Free hand, 2 - Text, 3 - Arrow, 4 - Rectangle\n//     this.fabricObjects = [];\n//     this.fabricObjectsData = [];\n//     this.color = 'rgb(0,0,0)';\n//     this.borderColor = 'rgb(0,0,0)';\n//     this.borderSize = 1;\n//     this.font_size = 16;\n//     this.active_canvas = 0;\n//     this.container_id = container_id;\n//     this.url = url;\n//     this.pageImageCompression = options.pageImageCompression\n//     ? options.pageImageCompression.toUpperCase()\n//     : \"NONE\";\n//     this.textBoxText = 'Edit Text';\n//     // this.format;\n//     // this.orientation;\n//     this.highlightBoxWidth=400;\n//     this.highlightBoxHeight=50;\n//     this.highlightBoxOpacity=0.3;\n//     this.freeDrawingBrushWidth=2;\n//     var inst = this;\n\n//     var loadingTask = pdfjsLib.getDocument(this.url);\n//     loadingTask.promise.then(function (pdf) {\n//         var scale = options.scale ? options.scale : 1.3;\n//         inst.number_of_pages = pdf.numPages;\n\n//         for (var i = 1; i <= pdf.numPages; i++) {\n\n//             pdf.getPage(i).then(function (page) {    //Creating canvas and rendering pages in the canvas\n//                 if (typeof inst.format === 'undefined' ||\n//                 typeof inst.orientation === 'undefined') {\n//                     var originalViewport = page.getViewport({ scale: 1 });\n//                     inst.format = [originalViewport.width, originalViewport.height];\n//                     inst.orientation =\n//                     originalViewport.width > originalViewport.height ?\n//                         'landscape' :\n//                         'portrait';\n//                 }\n\n//                 var viewport = page.getViewport({scale: scale});\n//                 var canvas = document.createElement('canvas');\n//                 document.getElementById(inst.container_id).appendChild(canvas);\n//                 canvas.className = 'pdf-canvas';\n//                 canvas.height = viewport.height;\n//                 canvas.width = viewport.width;\n\n//                 var context = canvas.getContext('2d');\n//                 var renderContext = {\n//                     canvasContext: context,\n//                     viewport: viewport\n//                 };\n//                 var renderTask = page.render(renderContext);\n\n//                 renderTask.promise.then(function () {\n//                     $('.pdf-canvas').each(function (index, el) {\n//                         $(el).attr('id', 'page-' + (index + 1) + '-canvas');\n//                     });\n//                     inst.pages_rendered++;\n//                     if (inst.pages_rendered == inst.number_of_pages) //Calling initFabric() after rendering the entire pages\n//                     {\n//                         inst.initFabric();\n//                     }\n//                 });\n//             });\n//         }\n//     }, function (reason) { // eslint-disable-line no-unused-vars\n//         // console.error(reason);\n//     });\n\n//     this.initFabric = function () {\n//         var inst = this;\n//         let canvases = $('#' + inst.container_id + ' canvas');\n//         canvases.each(function (index, el) {\n//             var background = el.toDataURL(\"image/png\");\n//             var fabricObj = new fabric.Canvas(el.id, {});\n//             inst.fabricObjects.push(fabricObj);\n//             if (typeof options.onPageUpdated == 'function') {\n//                 fabricObj.on('object:added', function() {\n//                     var oldValue = Object.assign({}, inst.fabricObjectsData[index]);\n//                     inst.fabricObjectsData[index] = fabricObj.toJSON();\n//                     options.onPageUpdated(index + 1, oldValue, inst.fabricObjectsData[index]);\n//                 });\n//             }\n//             fabricObj.setBackgroundImage(background, fabricObj.renderAll.bind(fabricObj));\n//             $(fabricObj.upperCanvasEl).click(function (event) {\n//                 inst.active_canvas = index;\n//                 inst.fabricClickHandler(event, fabricObj);\n//             });\n//             fabricObj.on('after:render', function () {\n//                 inst.fabricObjectsData[index] = fabricObj.toJSON();\n//                 fabricObj.off('after:render');\n//             });\n\n//             if (index === canvases.length - 1 && typeof options.ready === 'function') {\n//                 options.ready();\n//             }\n//         });\n//     };\n\n//     this.fabricClickHandler = function (event, fabricObj) {\n//         var inst = this;\n//         var activeObject = inst.fabricObjects[inst.active_canvas].getActiveObject();\n//         var toolObj;\n\n//         if (inst.active_tool == 2) {    //Text Box\n//           toolObj = new fabric.IText(inst.textBoxText, {\n//             left: event.clientX - fabricObj.upperCanvasEl.getBoundingClientRect().left,\n//             top: event.clientY - fabricObj.upperCanvasEl.getBoundingClientRect().top,\n//             fill: inst.color,\n//             fontSize: inst.font_size,\n//             lockRotation: true,\n//             lockScalingX: true,\n//             lockScalingY: true\n//           });\n//         }\n//         else if (inst.active_tool == 4) {    //Highlight Box\n//           toolObj = new fabric.Rect({\n//             left: event.clientX - fabricObj.upperCanvasEl.getBoundingClientRect().left,\n//             top: event.clientY - fabricObj.upperCanvasEl.getBoundingClientRect().top,\n//             width: inst.highlightBoxWidth,\n//             height:  inst.highlightBoxHeight,\n//             fill: inst.color,\n//             opacity: inst.highlightBoxOpacity,\n//             lockRotation: true\n//           });\n//         }\n//         else if(inst.active_tool== 0) {    //Select\n//               if(activeObject) {\n//                 //locking the rotation and scaling of free hand brush, if it is currently selected\n//                 if(activeObject.get('type')== 'path') {\n//                 activeObject.set({\n//                     lockScalingX: true,\n//                     lockScalingY: true,\n//                     lockRotation: true});\n//                 }\n//             }\n//           }\n\n//         //Change the current selected tool in the UI to Select if the active tool is highlight box or text\n//         if (inst.active_tool == 2 || inst.active_tool == 4) {\n//             var element = document.querySelector(\"#select\");\n//             $(\".tool-button.active\").removeClass(\"active\");\n//             $(element).addClass(\"active\");\n//         }\n\n//         //Change the currently active tool to Select\n//         inst.active_tool = 0;\n//         if (toolObj) {\n//                 fabricObj.add(toolObj);\n//         }\n//     };\n// };\n\n// PDFAnnotate.prototype.enableSelector = function () {\n//     var inst = this;\n//     inst.active_tool = 0;\n//     if (inst.fabricObjects.length > 0) {\n//         $.each(inst.fabricObjects, function (index, fabricObj) {\n//             fabricObj.isDrawingMode = false;\n//         });\n//     }\n\n\n// };\n\n// PDFAnnotate.prototype.enablePencil = function () {\n//     var inst = this;\n//     inst.active_tool = 1;\n//     if (inst.fabricObjects.length > 0) {\n//         $.each(inst.fabricObjects, function (index, fabricObj) {\n//             fabricObj.freeDrawingBrush.width=inst.freeDrawingBrushWidth;    //Changed default brush size\n//             fabricObj.isDrawingMode = true;\n//         });\n//     }\n\n// };\n\n// PDFAnnotate.prototype.enableAddText = function () {\n//     var inst = this;\n//     inst.active_tool = 2;\n//     if (inst.fabricObjects.length > 0) {\n//         $.each(inst.fabricObjects, function (index, fabricObj) {\n//             fabricObj.isDrawingMode = false;\n//         });\n//     }\n\n// };\n\n// PDFAnnotate.prototype.enableRectangle = function () {\n//     var inst = this;\n//     inst.active_tool = 4;\n//     if (inst.fabricObjects.length > 0) {\n//         $.each(inst.fabricObjects, function (index, fabricObj) {\n//             fabricObj.isDrawingMode = false;\n//         });\n//     }\n// };\n\n// PDFAnnotate.prototype.deleteSelectedObject = function () {\n//     var inst = this;\n//     var activeObject = inst.fabricObjects[inst.active_canvas].getActiveObject();\n//     if (activeObject)\n//     {\n//         if (confirm('Are you sure ?'))\n//         {\n//             inst.fabricObjects[inst.active_canvas].remove(activeObject);\n//         }\n//     }\n// };\n\n// //Updated by Asha Jose and Parvathy S Kumar\n//   PDFAnnotate.prototype.savePdf = function () {\n//     //Calling the serializePdf function\n//     this.serializePdf(function (string) {\n//       var value = JSON.stringify(JSON.parse(string), null, 4);\n\n//       var xmlhttp = new XMLHttpRequest();    //Creating an HTTP request instance\n//       xmlhttp.open(\"POST\", \"upload.php\", true);\n//       xmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n//       xmlhttp.onreadystatechange = function() {\n\n//         //Getting the response once upload.php finishes execution\n//         //readyState will become 4 if the execution finishes\n//         if (this.status == 200 && this.readyState == 4) {\n//             showMessage(\"file has been saved\");\n//         } else if (this.status != 200 && this.readyState == 4) {\n//             showMessage(\"Not able to save the file\");\n//         }\n\n//         /**\n//          * Displays a message box with the given message.\n//          *\n//          * @param {string} message - The message to be displayed.\n//          */\n//         function showMessage(message) {\n//             // Create a message box\n//             var messageBox = document.createElement(\"div\");\n//             messageBox.innerHTML = \"<p>\" + message + \"</p>\";\n\n//             // Style the message box\n//             messageBox.style.position = \"fixed\";\n//             messageBox.style.top = \"50%\";\n//             messageBox.style.left = \"50%\";\n//             messageBox.style.transform = \"translate(-50%, -50%)\";\n//             messageBox.style.backgroundColor = \"#4CAF50\";\n//             messageBox.style.color = \"#fff\";\n//             messageBox.style.padding = \"20px\";\n//             messageBox.style.borderRadius = \"5px\";\n//             messageBox.style.boxShadow = \"0 0 10px rgba(0, 0, 0, 0.3)\";\n//             messageBox.style.transition = \"opacity 0.5s\";\n\n//             // Append the message box to the body\n//             document.body.appendChild(messageBox);\n\n//             // Automatically remove the message box after 3 seconds\n//             setTimeout(function () {\n//                 messageBox.style.opacity = \"0\";\n//                 setTimeout(function () {\n//                     document.body.removeChild(messageBox);\n//                     window.close();\n//                     window.opener.location.reload();\n//                 }, 500); // Fade-out transition time\n//             }, 1000); // Display time\n//         }\n\n\n//       };\n//       //Sending data to upload.php\n//       xmlhttp.send(\"id=\" + value + \"&contextid=\" + contextid + \"&attemptid=\"+attemptid\n//       + \"&filename=\" + filename + \"&usageid=\" + usageid + \"&slot=\" + slot);\n//     });\n// };\n\n\n// //Convert the Page Annotations to JSON data\n// PDFAnnotate.prototype.serializePdf = function (callback) {\n//     var inst = this;\n//     var pageAnnotations=[];\n//     //Initialising list of fabric objects for each page\n//     //Length of fabricObjects is the number of pages\n//     for (let i = 0; i < inst.fabricObjects.length; i++) {\n//       pageAnnotations.push([]);\n//     }\n\n//     //The function is invoked for each page  to iterate through the annotations\n//     inst.fabricObjects.forEach(function (fabricObject,index) {\n//       fabricObject.clone(function (fabricObjectCopy) {\n//         fabricObjectCopy.setBackgroundImage(null);\n//         fabricObjectCopy.setBackgroundColor('');\n//         if(fabricObjectCopy._objects.length !== 0)    //Checking if the page has any annotations\n//         {\n//             for(var j=0; j< fabricObjectCopy._objects.length ; j++)    //Iterate through the list of annotations\n//               {\n//                 //Used to handle the translation of path object(free hand)\n//                 if(fabricObjectCopy._objects[j].get('type')== 'path')\n//                 {\n//                     var pathObj = fabricObjectCopy._objects[j];\n//                     var matrix=pathObj.calcTransformMatrix();\n//                     var pointsList = pathObj.path;\n//                     var length = Object.keys(pointsList).length;\n//                     var offsetX=pathObj.pathOffset.x;\n//                     var offsetY=pathObj.pathOffset.y;\n//                     for(var i=0; i< length;i++)\n//                     {\n//                         var point1= new fabric.Point(pointsList[i][1],pointsList[i][2]);\n//                         var newPoints1= fabric.util.transformPoint(point1, matrix);\n//                         pointsList[i][1] = newPoints1.x - offsetX;\n//                         pointsList[i][2] = newPoints1.y - offsetY;\n\n//                         if(i!=0 && i!=length -1)\n//                         //First and Last elements in the pointsList have only a single set of coordinate\n//                         //All the other elements have 2 set of points\n//                         {\n//                             var point2= new fabric.Point(pointsList[i][3],pointsList[i][4]);\n//                             var newPoints2= fabric.util.transformPoint(point2, matrix);\n//                             pointsList[i][3] = newPoints2.x - offsetX;\n//                             pointsList[i][4] = newPoints2.y - offsetY;\n//                         }\n//                     }\n//                     //Copy transformed list of points to the path object\n//                     fabricObjectCopy._objects[j].path=pointsList;\n//                 }\n//               }\n\n//             pageAnnotations[index].push(fabricObjectCopy);\n//         }\n\n//         if (index+1 === inst.fabricObjects.length) {\n//           var data = {\n//             page_setup: {\n//               format: inst.format,\n//               orientation: inst.orientation,\n//             },\n//             pages: pageAnnotations,\n//           };\n//           callback(JSON.stringify(data));    //The serialized data is converted to JSON\n//         }\n//       });\n//     });\n//   };\n// //Updation ends\n\n// PDFAnnotate.prototype.setColor = function (color) {\n//     var inst = this;\n//     inst.color = color;\n//     $.each(inst.fabricObjects, function (index, fabricObj) {\n//         fabricObj.freeDrawingBrush.color = color;\n//     });\n// };\n\n// PDFAnnotate.prototype.setBorderColor = function (color) {\n//     var inst = this;\n//     inst.borderColor = color;\n// };\n\n// PDFAnnotate.prototype.setFontSize = function (size) {\n//     this.font_size = size;\n// };\n\n\nexport const init =(contextId,attemptId,fileName,usageId,sloT) =>{\n    // eslint-disable-next-line no-console\n    window.console.log(\"pdfAnnotate :: Init\");\n\n    window.alert(\"sometext pdfAnnotate\");\n\n    contextid=contextId;\n    attemptid=attemptId;\n    filename=fileName;\n    usageid=usageId;\n    slot=sloT;\n    window.console.log(contextid);\n    window.console.log(attemptid);\n    window.console.log(filename);\n    window.console.log(slot);\n    window.console.log(usageid);\n};"],"names":["contextid","attemptid","filename","usageid","slot","contextId","attemptId","fileName","usageId","sloT","window","console","log","alert"],"mappings":";;;;;;;;;;IAuCIA,UAAUC,UAAUC,SAASC,QAAQC,gGA6WtB,CAACC,UAAUC,UAAUC,SAASC,QAAQC,QAErDC,OAAOC,QAAQC,IAAI,uBAEnBF,OAAOG,MAAM,wBAEbb,UAAUK,UACVJ,UAAUK,UACVJ,SAASK,SACTJ,QAAQK,QACRJ,KAAKK,KACLC,OAAOC,QAAQC,IAAIZ,WACnBU,OAAOC,QAAQC,IAAIX,WACnBS,OAAOC,QAAQC,IAAIV,UACnBQ,OAAOC,QAAQC,IAAIR,MACnBM,OAAOC,QAAQC,IAAIT"}